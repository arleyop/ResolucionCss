@Configuration
@EnableWebSecurity
public class SecurityConfig {	
	
	@Autowired
	private CorsConfig config;

    @Bean
    @Order(1)
    public SecurityFilterChain personalizedSecurityFilterChain(HttpSecurity http) throws Exception {
        http
            // Aquí se restringen las rutas que este filtro manejará
            .securityMatcher("/api/token", "/api/users/createuser", "/rol", "/ws-progress/**")
            .cors(cors -> cors.configurationSource(config.corsConfigurationSource()))
            .csrf(csrf -> csrf.ignoringRequestMatchers("/api/token", "/api/users/createuser", "/rol", "/ws-progress/**"))
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/token", "/api/users/createuser", "/rol", "/ws-progress/**").permitAll()
            )
            .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));
        
        return http.build();
    }

	@Bean
	public UserDetailsService userDetailsService() {
		return new CustomUserDetailsService();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

    @Bean
    public KeyPair keyPair() {
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            return keyPairGenerator.generateKeyPair();
        } catch (Exception ex) {
            throw new IllegalStateException("Error al generar el par de claves RSA", ex);
        }
    }

    @Bean
    public JwtEncoder jwtEncoder(KeyPair keyPair) {
        JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(
            new JWKSet(new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())
                .privateKey((RSAPrivateKey) keyPair.getPrivate())
                .build())
        );
        return new NimbusJwtEncoder(jwkSource);
    }

    @Bean
    public JwtDecoder jwtDecoder(KeyPair keyPair) {
        return NimbusJwtDecoder.withPublicKey((RSAPublicKey) keyPair.getPublic()).build();
    }
}




@Bean
@Order(2)
public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
    http
        .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())
        .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));

    return http.build();
}
