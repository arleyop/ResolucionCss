package com.santander.bnc.bsn021.bncbsn021gemotorbackend.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
    basePackages = "com.santander.bnc.bsn021.bncbsn021gemotorbackend.repository.golden",
    excludeFilters = @ComponentScan.Filter(
        type = FilterType.REGEX, 
        pattern = "com\\.santander\\.bnc\\.bsn021\\.bncbsn021gemotorbackend\\.repository\\.motor\\..*"
    ),
    entityManagerFactoryRef = "goldenEntityManagerFactory",
    transactionManagerRef = "goldenTransactionManager"
)
@EntityScan(basePackages = "com.santander.bnc.bsn021.bncbsn021gemotorbackend.model.golden")
public class GoldenConfig {

    @Value("${env.database.golden.hibernate.default_schema}")
    private String defaultSchema;

    @Autowired
    private Environment environment;

    @Bean(name = "goldenDataSource")
    @ConfigurationProperties(prefix = "spring.datasource.golden")
    public DataSource goldenDataSource() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "goldenEntityManagerFactory")
    public LocalContainerEntityManagerFactoryBean goldenEntityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(goldenDataSource());
        em.setPackagesToScan("com.santander.bnc.bsn021.bncbsn021gemotorbackend.model.golden");
        em.setPersistenceUnitName("goldenPU");
        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
        em.setJpaProperties(hibernateProperties());
        return em;
    }

    @Bean(name = "goldenTransactionManager")
    public PlatformTransactionManager goldenTransactionManager(
        @Qualifier("goldenEntityManagerFactory") LocalContainerEntityManagerFactoryBean emf) {
        return new JpaTransactionManager(emf.getObject());
    }

    private Properties hibernateProperties() {
        Properties properties = new Properties();

        if (environment.getActiveProfiles().length > 0 && "test".equals(environment.getActiveProfiles()[0])) {
            properties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
        } else {
            // SQL Server dialect
            properties.put("hibernate.dialect", "org.hibernate.dialect.SQLServer2016Dialect");
        }

        properties.put("hibernate.show_sql", "true");
        properties.put("hibernate.hbm2ddl.auto", "update");
        
        // SQL Server schema configuration
        if (defaultSchema != null && !defaultSchema.isEmpty()) {
            properties.put("hibernate.default_schema", defaultSchema);
        }
        
        // SQL Server specific properties
        properties.put("hibernate.format_sql", "true");
        properties.put("hibernate.jdbc.lob.non_contextual_creation", "true");
        
        return properties;
    }

    @Bean(name = "goldenJdbcTemplate")
    public JdbcTemplate goldenJdbcTemplate(
        @Qualifier("goldenDataSource") DataSource dataSource
    ) {
        return new JdbcTemplate(dataSource);
    }
}
