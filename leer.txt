package com.santander.bnc.bsn021.bncbsn021gemotorbackend.infrastructure.external.auth.impl;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Repository;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.santander.bnc.bsn021.bncbsn021gemotorbackend.infrastructure.external.auth.ExternalAuthService;

@Repository
public class ExternalAuthServiceImpl implements ExternalAuthService {

    @Value("${env.external.token.url}")
    private String tokenUrl;

    @Value("${env.external.token.authorizationheader}")
    private String authorizationHeader;

    private final RestTemplate restTemplate = new RestTemplate();

    @Override
    public String requestToken(String username, String password) {
        try {
            // Construir headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", authorizationHeader);

            // Construir cuerpo
            String body = String.format("grant_type=password&username=%s&password=%s", username, password);
            HttpEntity<String> entity = new HttpEntity<>(body, headers);

            // Enviar solicitud POST
            ResponseEntity<String> response = restTemplate.exchange(
                    tokenUrl,
                    HttpMethod.POST,
                    entity,
                    String.class
            );

            // Verificar respuesta
            if (response.getStatusCode() == HttpStatus.OK) {
                return response.getBody();
            } else {
                throw new RuntimeException("Error al solicitar el token: Código HTTP " +
                        response.getStatusCodeValue() + " - " + response.getBody());
            }

        } catch (HttpClientErrorException e) {
            // Errores HTTP 4xx o 5xx
            String responseBody = e.getResponseBodyAsString();
            throw new RuntimeException("Error HTTP al solicitar token: " +
                    e.getRawStatusCode() + " - " + responseBody, e);
        } catch (RestClientException e) {
            // Otros errores de red o cliente
            throw new RuntimeException("Error de comunicación con el servidor OAuth: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new RuntimeException("Error inesperado al comunicarse con el servicio OAuth: " + e.getMessage(), e);
        }
    }
}
