import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.exception.AccessDeniedException;

import java.util.*;
import java.util.stream.Collectors;

@Service
@Transactional
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private MonitoreoService monitoreoService;

	@Override
	public Map<String, Object> createUser(UserDTO user) {
		Map<String, Object> response = new HashMap<>();
		try {
			AppUser appUser = new AppUser();

			if (user.getNombreusuario() != null && user.getNombreusuario().matches("[xn].*")) {
				appUser.setNombreusuario(user.getNombreusuario());
			} else {
				response.put(ConstantsUtil.STATUS, "file");
				response.put(ConstantsUtil.MESSAGE,
						"El nombre de usuario debe comenzar con 'x' o 'n' y la primera letra debe ser minúscula.");
				return response;
			}

			appUser.setNombre(user.getNombre());
			appUser.setApellido(user.getApellido());
			appUser.setCedula(user.getCedula());
			appUser.setCorreo(user.getCorreo());
			appUser.setEsActivo(user.isEsActivo());

			// Validación de rol
			Long roleId = user.getRoleId();
			if (!usuarioAutenticadoPuedeAsignarRol(roleId)) {
				throw new AccessDeniedException("No autorizado para asignar este rol.");
			}

			Role role = roleRepository.findById(roleId)
					.orElseThrow(() -> new RuntimeException("Rol no encontrado"));

			appUser.setRole(role);
			userRepository.save(appUser);

			response.put(ConstantsUtil.STATUS, ConstantsUtil.SUCCESS);
			response.put(ConstantsUtil.DATA, null);

			monitoreoService.registrarAccionMonitoreo(ConstantsUtil.MONITOREO_ACCION_GUARDAR,
					ConstantsUtil.MODULO_GESTION_USUARIO_SUBMODULO_USUARIO);

		} catch (Exception e) {
			response.put(ConstantsUtil.STATUS, "error");
			response.put(ConstantsUtil.MESSAGE, "Ha ocurrido un error en el servidor API");
		}
		return response;
	}

	private boolean usuarioAutenticadoPuedeAsignarRol(Long targetRoleId) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.isAuthenticated()) {
			String username = authentication.getName();
			AppUser currentUser = userRepository.findByNombreusuario(username);
			String currentUserRole = currentUser.getRole().getNombre();

			// Simulación de lista blanca por rol
			Map<String, Set<Long>> permisosAsignacion = new HashMap<>();
			permisosAsignacion.put("Administradorusuarios", Set.of(2L, 3L)); // Solo puede asignar ciertos roles
			permisosAsignacion.put("SuperAdmin", null); // Puede asignar todos

			if ("SuperAdmin".equals(currentUserRole)) {
				return true;
			}

			Set<Long> rolesPermitidos = permisosAsignacion.get(currentUserRole);
			return rolesPermitidos != null && rolesPermitidos.contains(targetRoleId);
		}
		return false;
	}

	@Override
	public List<AppUserDTO> getAllUsers() {
		List<AppUser> users = userRepository.findAll();
		return users.stream().map(this::convertToDto).collect(Collectors.toList());
	}

	@Override
	public Map<String, Object> updateUser(Long id, UserDTO body) {
		Map<String, Object> response = new HashMap<>();
		try {
			AppUser appUser = userRepository.findById(id)
					.orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

			appUser.setNombre(body.getNombre());
			appUser.setApellido(body.getApellido());
			appUser.setCedula(body.getCedula());
			appUser.setCorreo(body.getCorreo());
			appUser.setEsActivo(body.isEsActivo());

			// Validación de rol
			Long roleId = body.getRoleId();
			if (!usuarioAutenticadoPuedeAsignarRol(roleId)) {
				throw new AccessDeniedException("No autorizado para asignar este rol.");
			}
			Role role = roleRepository.findById(roleId)
					.orElseThrow(() -> new RuntimeException("Rol no encontrado"));

			appUser.setRole(role);
			userRepository.save(appUser);

			response.put("status", "success");
			response.put("data", null);

			monitoreoService.registrarAccionMonitoreo(ConstantsUtil.MONITOREO_ACCION_EDITAR,
					ConstantsUtil.MODULO_GESTION_USUARIO_SUBMODULO_USUARIO);

		} catch (Exception e) {
			response.put("status", "error");
			response.put("message", "Error interno del servidor: Ha ocurrido un error en el servidor API");
		}
		return response;
	}

	private AppUserDTO convertToDto(AppUser appUser) {
		AppUserDTO dto = new AppUserDTO();
		dto.setId(appUser.getId_app_user());
		dto.setNombreusuario(appUser.getNombreusuario());
		dto.setNombre(appUser.getNombre());
		dto.setApellido(appUser.getApellido());
		dto.setCedula(appUser.getCedula());
		dto.setCorreo(appUser.getCorreo());
		dto.setEsActivo(appUser.isEsActivo());
		dto.setRoleId(appUser.getRole().getId_rol());
		dto.setRolnombre(appUser.getRole().getNombre());
		return dto;
	}

	@Override
	public AppUserDTO getUsername(String name) {
		AppUser user = userRepository.findByNombreusuario(name);
		AppUserDTO appUserDTO = new AppUserDTO();
		appUserDTO.setId(user.getId_app_user());
		appUserDTO.setRoleId(user.getRole().getId_rol());
		appUserDTO.setRolnombre(user.getRole().getNombre());
		appUserDTO.setEsActivo(user.isEsActivo());
		return appUserDTO;
	}

	public AppUserDTO getUser(Long id) {
		if (id == null) {
			throw new IllegalArgumentException("El identificador del usuario no puede ser nulo.");
		}
		Optional<AppUser> userOptional = userRepository.findById(id);
		if (!userOptional.isPresent()) {
			throw new UserNotFoundException("Usuario con el identificador " + id + " no encontrado.");
		}
		AppUser user = userOptional.get();
		return new AppUserDTO(user.getId_app_user(), user.getNombreusuario(), user.getNombre(), user.getApellido(),
				user.getCedula(), user.getCorreo(), true, user.getRole().getId_rol(), user.getRole().getNombre());
	}
}
