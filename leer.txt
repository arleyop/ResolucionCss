package com.santander.bnc.bsn021.bncbsn021gemotorbackend.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.santander.bnc.bsn021.bncbsn021gemotorbackend.dto.AppUserDTO;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.dto.UserDTO;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.exception.UserNotFoundException;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.model.motor.AppUser;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.model.motor.Role;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.repository.motor.RoleRepository;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.repository.motor.UserRepository;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.service.MonitoreoService;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.service.UserService;
import com.santander.bnc.bsn021.bncbsn021gemotorbackend.utils.ConstantsUtil;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private MonitoreoService monitoreoService;

	@Override
	public Map<String, Object> createUser(UserDTO user) {
		Map<String, Object> response = new HashMap<>();
		try {
			AppUser appUser = new AppUser();
			if (user.getNombreusuario() != null && user.getNombreusuario().matches("[xn].*")) {
				appUser.setNombreusuario(user.getNombreusuario());
			} else {
				response.put(ConstantsUtil.STATUS, "file");
				response.put(ConstantsUtil.MESSAGE,
						"El nombre de usuario debe comenzar con 'x' o 'n' y la primera letra debe ser minúscula.");
				return response;
			}

			appUser.setNombre(user.getNombre());
			appUser.setApellido(user.getApellido());
			appUser.setCedula(user.getCedula());
			appUser.setCorreo(user.getCorreo());
			appUser.setEsActivo(user.isEsActivo());

			// Validación de rol
			Long roleId = user.getRoleId();
			if (!usuarioAutenticadoPuedeAsignarRol(roleId)) {
				throw new SecurityException("No autorizado para asignar este rol.");
			}
			Role role = roleRepository.findById(roleId).orElseThrow(() -> new RuntimeException("Rol no encontrado"));

			// Crear y guardar usuario
			appUser.setRole(role);
			userRepository.save(appUser);
			response.put(ConstantsUtil.STATUS, ConstantsUtil.SUCCESS);
			response.put(ConstantsUtil.DATA, null);
			monitoreoService.registrarAccionMonitoreo(ConstantsUtil.MONITOREO_ACCION_GUARDAR,
					ConstantsUtil.MODULO_GESTION_USUARIO_SUBMODULO_USUARIO);

		} catch (Exception e) {
			response.put(ConstantsUtil.STATUS, "error");
			response.put(ConstantsUtil.MESSAGE, "Ha ocurrido un error, en servidor API");
		}
		return response;

	}

	public boolean usuarioAutenticadoPuedeAsignarRol(Long roleId) {
		// Obtener el usuario autenticado desde el contexto de seguridad (por ejemplo,
		// Spring Security)

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.isAuthenticated()) {
			String username = authentication.getName();
			AppUser user = userRepository.findByNombreusuario(username);

			// Asumimos que el rol del usuario autenticado está en 'authenticatedUser'
			String authenticatedRole = user.getRole().getNombre(); // O el método adecuado para obtener el rol

			// Validación de roles permitidos para asignar roles a otros usuarios
			if (authenticatedRole.equals("Administradorusuarios")) {
				// Los ADMIN pueden asignar cualquier rol
				return true;
			} else {
				// Los usuarios básicos (USUARIO) no pueden asignar roles a otros
				return false;
			}
		}
		return false;
	}

	@Override
	public List<AppUserDTO> getAllUsers() {
		List<AppUser> users = userRepository.findAll();
		return users.stream().map(this::convertToDto).collect(Collectors.toList());
	}

	@Override
	public Map<String, Object> updateUser(Long id, UserDTO body) {
		Map<String, Object> response = new HashMap<>();
		try {

			AppUser appUser = userRepository.findById(id)
					.orElseThrow(() -> new RuntimeException("Usuario no encontrado"));
			appUser.setNombre(body.getNombre());
			appUser.setApellido(body.getApellido());
			appUser.setCedula(body.getCedula());
			appUser.setCorreo(body.getCorreo());
			appUser.setEsActivo(body.isEsActivo());
			// Validación de rol
			Long roleId = body.getRoleId();
			if (!usuarioAutenticadoPuedeAsignarRol(roleId)) {
				throw new SecurityException("No autorizado para asignar este rol.");
			}
			Role role = roleRepository.findById(body.getRoleId())
					.orElseThrow(() -> new RuntimeException("Role no encontrado"));
			appUser.setRole(role);

			userRepository.save(appUser);
			response.put("status", "success");
			response.put("data", null);
			monitoreoService.registrarAccionMonitoreo(ConstantsUtil.MONITOREO_ACCION_EDITAR,
					ConstantsUtil.MODULO_GESTION_USUARIO_SUBMODULO_USUARIO);
		} catch (Exception e) {
			response.put("status", "error");
			response.put("message", "Error interno del servidor: " + "Ha ocurrido un error, en servidor API");
		}
		return response;
	}

	private AppUserDTO convertToDto(AppUser appUser) {
		AppUserDTO dto = new AppUserDTO();
		dto.setId(appUser.getId_app_user());
		dto.setNombreusuario(appUser.getNombreusuario());
		dto.setNombre(appUser.getNombre());
		dto.setApellido(appUser.getApellido());
		dto.setCedula(appUser.getCedula());
		dto.setCorreo(appUser.getCorreo());
		dto.setEsActivo(appUser.isEsActivo());
		dto.setRoleId(appUser.getRole().getId_rol());
		dto.setRolnombre(appUser.getRole().getNombre());
		return dto;
	}

	@Override
	public AppUserDTO getUsername(String name) {
		AppUser user = userRepository.findByNombreusuario(name);
		AppUserDTO appUserDTO = new AppUserDTO();
		appUserDTO.setId(user.getId_app_user());
		appUserDTO.setRoleId(user.getRole().getId_rol());
		appUserDTO.setRolnombre(user.getRole().getNombre());
		appUserDTO.setEsActivo(user.isEsActivo());
		return appUserDTO;
	}

	public AppUserDTO getUser(Long id) {
		// Validar que el identificador no sea nulo
		if (id == null) {
			throw new IllegalArgumentException("El identificador del usuario no puede ser nulo.");
		}
		// Buscar el usuario en la base de datos
		Optional<AppUser> userOptional = userRepository.findById(id);

		// Si el usuario no se encuentra, lanzar una excepción personalizada
		if (!userOptional.isPresent()) {
			throw new UserNotFoundException("Usuario con el identificador " + id + " no encontrado.");
		}

		// Convierte el modelo de usuario a DTO y lo retorna
		AppUser user = userOptional.get();
		return new AppUserDTO(user.getId_app_user(), user.getNombreusuario(), user.getNombre(), user.getApellido(),
				user.getCedula(), user.getCorreo(), true, user.getRole().getId_rol(), user.getRole().getNombre());

	}

}
