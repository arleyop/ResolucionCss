package com.santander.bnc.bsn021.bncbsn021gemotorbackend.infrastructure.external.auth.impl;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.santander.bnc.bsn021.bncbsn021gemotorbackend.infrastructure.external.auth.ExternalAuthService;

@Repository
public class ExternalAuthServiceImpl implements ExternalAuthService {

	@Value("${env.external.token.url}")
	private String tokenUrl;
	@Value("${env.external.token.authorizationheader}")
	private String authorizationHeader;

	public String requestToken(String username, String password) {
		try {
			String body = String.format("grant_type=password&username=%s&password=%s", username, password);

			URL url = new URL(tokenUrl);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Authorization", authorizationHeader);
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			connection.setDoOutput(true);

			try (OutputStream os = connection.getOutputStream()) {
				os.write(body.getBytes());
				os.flush();
			}

			// Verificar la respuesta
			int responseCode = connection.getResponseCode();
			if (responseCode == HttpURLConnection.HTTP_OK) {
				// Leer la respuesta
				try (java.util.Scanner scanner = new java.util.Scanner(connection.getInputStream(), "UTF-8")) {
					scanner.useDelimiter("\\A");
					return scanner.hasNext() ? scanner.next() : "";
				}
			} else {
				// Leer el error
				try (java.util.Scanner scanner = new java.util.Scanner(connection.getErrorStream(), "UTF-8")) {
					scanner.useDelimiter("\\A");
					String errorResponse = scanner.hasNext() ? scanner.next() : "Error desconocido";
					throw new RuntimeException(
							"Error al solicitar el token: Código HTTP " + responseCode + " - " + errorResponse);
				}
			}
		} catch (MalformedURLException e) {
			throw new RuntimeException("URL mal formada: " + tokenUrl);
		} catch (IOException e) {
			throw new RuntimeException("Error de comunicación con el servidor OAuth");
		} catch (Exception e) {
			throw new RuntimeException("Error inesperado al comunicarse con el servicio OAuth: ");
		}
	}

}
