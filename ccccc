export class AuthService {
  private loggedIn = new BehaviorSubject<boolean>(false);
  private localUrl = `${environment.apiUrl}/token`;
  private userHasBeenActive:boolean = false;

  constructor(
    private http: HttpClient, 
    public dialog: MatDialog,
    private router: Router,
    private inactivityService: InactivityService,
  ) {
    /* this.inactivityService.setHandler(() => {
      setInterval(() => {
        this.checkSessionExpiration(); // Verificar expiración cada minuto
      }, 60000); // Cada 60 segundos
    }); */
    setInterval(() => {
      this.checkSessionExpiration(); // Verificar expiración cada minuto
    }, 60000); // Cada 60 segundos
  }

  getUserRole(): string {
    return localStorage.getItem('rol') || ''; // Devuelve el rol almacenado o una cadena vacía si no existe
  }
  
  
  get isLogged():Observable<boolean>{
    return this.loggedIn.asObservable();
  }


   localAuth(username: string, passwordQuemado: string): Observable<any> {
   
    const body = new URLSearchParams();
    body.set('username', username);
    body.set('password', passwordQuemado);

    const headers = new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded'
    })

    return this.http.post<any>(this.localUrl, body.toString(), {headers})
      .pipe(
        map(response => {
          console.log("verificacion token ", response.access_token);
          this.router.navigate(['/motor']);
          localStorage.setItem('iduser', response.idUser);
            localStorage.setItem('usuario', response.nombre);
            localStorage.setItem('expires_in', response.expires_in);
            localStorage.setItem('rol', response.scope );
            localStorage.setItem('token', response.access_token);

                // Cálculo del tiempo de expiración
            const expiresIn = response.expires_in;
            const expirationTime = new Date().getTime() + expiresIn * 1000; // Convierte a milisegundos
            localStorage.setItem('expirationTime', expirationTime.toString());

          return response;
        }),
        catchError(error => {
          console.error('Error de autenticación local', error);
          return of({
            status: 404
          });
        })
      );
  }
